Project Directory Structure:
├── src
│   ├── app
│   │   ├── (protected)
│   │   │   ├── api-key
│   │   │   │   └── page.tsx
│   │   │   ├── home
│   │   │   │   └── page.tsx
│   │   │   ├── layout.tsx
│   │   │   ├── subscription
│   │   │   │   ├── page.tsx
│   │   │   │   └── test_page.tsx
│   │   ├── docs
│   │   │   └── page.tsx
│   │   ├── globals.css
│   │   ├── layout.tsx
│   │   ├── login
│   │   │   ├── email
│   │   │   │   └── page.tsx
│   │   │   └── page.tsx
│   │   ├── page.tsx
│   │   ├── pricing
│   │   │   └── page.tsx
│   ├── components
│   │   ├── login
│   │   │   └── EmailAuthForm.tsx
│   │   ├── subscriptions
│   │   │   └── SubscriptionCard.tsx
│   │   ├── topbar
│   │   │   ├── LogoButton.tsx
│   │   │   ├── NavigationButton.tsx
│   │   │   └── ProfileButton.tsx
│   ├── data
│   │   └── subscriptions.ts
│   ├── firebase
│   │   ├── auth.ts
│   │   ├── config.ts
│   │   ├── firestore.ts
│   │   ├── functions
│   │   │   └── generateAPIKey.ts
│   │   └── stripe.ts
└── test


File: 
src/app/(protected)/api-key/page.tsx
Content: 
"use client";

import { auth } from "@/firebase/auth";
import ProfileButton from "@/components/topbar/ProfileButton";
import NavigationButton from "@/components/topbar/NavigationButton";
import LogoButton from "@/components/topbar/LogoButton";
import { useEffect, useState } from "react";
import { useAuthState } from "react-firebase-hooks/auth";
import { SubscriptionID, SubscriptionIDs } from "@/data/subscriptions";
import { useRouter } from "next/navigation";
import { generateApiKey } from "@/firebase/functions/generateAPIKey";
import { fetchApiKey } from "@/firebase/firestore";
import { getSubscriptionInfo } from "@/firebase/stripe";

export default function APIKey() {
  const [user] = useAuthState(auth);
  // load user subscription status
  const [isLoadingUserSubscription, setIsLoadingUserSubscription] =
    useState(true);
  const [userSubscription, setUserSubscription] =
    useState<SubscriptionID | null>(null);
  // load currently assigned api key
  const [apiKey, setApiKey] = useState<string>("");
  const [isLoadingApiKey, setIsLoadingApiKey] = useState(true);
  // check if all user info is loaded this component requires
  const [isLoadingUserInfo, setIsLoadingUserInfo] = useState(true);
  const [copySuccess, setCopySuccess] = useState("");
  const router = useRouter();

  useEffect(() => {
    if (user) {
      getSubscriptionInfo(user.uid).then((subscriptionInfo) => {
        if (subscriptionInfo) {
          setUserSubscription(subscriptionInfo.role);
        }
        setIsLoadingUserSubscription(false);
      });
      // Fetch API key
      fetchApiKey(user.uid).then((apiKey) => {
        if (apiKey) {
          setApiKey(apiKey);
        }
        setIsLoadingApiKey(false);
      });
    }
  }, [user]);

  useEffect(() => {
    if (!isLoadingUserSubscription && !isLoadingApiKey) {
      setIsLoadingUserInfo(false);
    }
  }, [isLoadingUserSubscription, isLoadingApiKey]);

  const handleGenerateAPIKey = async () => {
    try {
      const { apiKey } = await generateApiKey();
      setApiKey(apiKey);
      setCopySuccess("API Key Generated Successfully!");
      setTimeout(() => setCopySuccess(""), 3000);
    } catch (error) {
      setCopySuccess("Failed to Generate API Key.");
      setTimeout(() => setCopySuccess(""), 3000);
    }
  };

  const handleCopyAPIKey = () => {
    navigator.clipboard.writeText(apiKey).then(
      () => {
        setCopySuccess("API Key Copied to Clipboard!");
        setTimeout(() => setCopySuccess(""), 3000);
      },
      () => {
        setCopySuccess("Failed to Copy API Key.");
        setTimeout(() => setCopySuccess(""), 3000);
      }
    );
  };

  return (
    <div className=" p-3 min-h-screen font-[family-name:var(--font-geist-sans)]  ">
      {/* Top Header */}
      <div className="flex justify-between border-b-gray-100 pb-2 border-b-2 h-14">
        <LogoButton title="CREV" href="/home" />
        <div className="flex gap-4">
          <NavigationButton title="Docs" href="/docs" active={false} />
          <NavigationButton
            title="Code Review API Key"
            href="/api-key"
            active={true}
          />
          <ProfileButton />
        </div>
      </div>

      {/* Main Content */}
      <div className="max-w-4xl mx-auto mt-8 bg-white shadow-md rounded-lg p-8">
        <h1 className="text-3xl font-semibold text-gray-800 mb-4">
          API Keys Management
        </h1>
        <p className="text-gray-600 mb-6">
          Manage your API keys for accessing the AI review functionality of the
          CREV tool. Generate new keys or revoke existing ones as needed. You
          need an active subscription to generate API keys which grant usage
          according to your chosen plan.
        </p>

        {/* Subscription Status */}
        <div className="mb-4">
          <h2 className="text-xl font-medium text-gray-700 mb-2">
            Subscription Status
          </h2>
          {isLoadingUserSubscription ? (
            <p className="text-gray-500">Loading subscription status...</p>
          ) : userSubscription ? (
            <p className="text-green-600">
              Active Subscription: {userSubscription}
            </p>
          ) : (
            <p className="text-red-600">
              No active subscription. Please purchase one to generate API keys.
            </p>
          )}
        </div>

        {/* Manage/Update Subscription Button */}
        <div className="mb-6">
          <button
            onClick={() => router.push("/subscription")}
            className="w-full bg-gray-500 text-white px-4 py-3 rounded-md hover:bg-gray-600 transition duration-200"
          >
            Manage Subscription
          </button>
        </div>
        {/* Conditionally Render API Key Section */}
        {userSubscription && (
          <>
            {/* Current API Key */}
            <div className="mb-6">
              <h2 className="text-xl font-medium text-gray-700 mb-2">
                Current API Key
              </h2>
              <div className="flex items-center bg-gray-100 p-4 rounded-md">
                {isLoadingApiKey ? (
                  <p className="text-gray-500 mt-2">Loading API key...</p>
                ) : apiKey === "" ? (
                  <p className="text-red-600 mt-2">
                    No API key found. Please generate one.
                  </p>
                ) : (
                  <span className="flex-1 text-gray-800 break-all">
                    {apiKey}
                  </span>
                )}
                {!isLoadingApiKey && apiKey !== "" && (
                  <button
                    onClick={handleCopyAPIKey}
                    className="ml-4 bg-gray-300 hover:bg-gray-400 text-gray-800 px-3 py-2 rounded-md transition duration-200"
                  >
                    Copy
                  </button>
                )}
              </div>

              {copySuccess && (
                <p
                  className={`mt-2 ${
                    copySuccess.includes("Failed")
                      ? "text-red-500"
                      : "text-green-500"
                  }`}
                >
                  {copySuccess}
                </p>
              )}
            </div>

            {/* Generate API Key */}
            <div className="mb-6">
              <button
                onClick={handleGenerateAPIKey}
                className="w-full bg-gray-800 hover:bg-gray-700 text-white px-4 py-3 rounded-md transition duration-200"
              >
                Generate New API Key
              </button>
            </div>
          </>
        )}
      </div>
    </div>
  );
}


File: 
src/app/(protected)/home/page.tsx
Content: 
"use client";

import ProfileButton from "@/components/topbar/ProfileButton";
import NavigationButton from "@/components/topbar/NavigationButton";
import LogoButton from "@/components/topbar/LogoButton";

export default function Home() {
  return (
    <div className=" p-3 min-h-screen font-[family-name:var(--font-geist-sans)]  ">
      <div className="flex justify-between border-b-gray-100 pb-2 border-b-2 h-14">
        <LogoButton title="CREV" href="/home" />
        <div className="flex gap-4">
          <NavigationButton title="Docs" href="/docs" active={false} />
          <NavigationButton
            title="Code Review API Key"
            href="/api-key"
            active={false}
          />
          <ProfileButton />
        </div>
      </div>

      <div className="flex items-center  justify-center flex-col  space-y-4 pb-10 pt-2  font-[family-name:var(--font-geist-mono)]">
        LOGGED IN
      </div>
    </div>
  );
}


File: 
src/app/(protected)/layout.tsx
Content: 
"use client";

import { useAuthState } from "react-firebase-hooks/auth";
import { auth } from "@/firebase/auth";
import { useRouter } from "next/navigation";
import { useEffect } from "react";

export default function ProtectLayout({
  children,
}: {
  children: React.ReactNode;
}) {
  const [user, loading] = useAuthState(auth);
  const router = useRouter();

  // protect the api-key route
  useEffect(() => {
    if (!loading && !user) {
      // Redirect to login if not authenticated
      router.push("/login");
    }
  }, [user, loading, router]);

  if (loading) {
    return (
      <div className="flex items-center justify-center h-screen">
        <div className="animate-spin rounded-full h-12 w-12 border-t-2 border-gray-800"></div>
      </div>
    );
  } else {
    // Render the page for authenticated users
    return <div>{children}</div>;
  }
}


File: 
src/app/(protected)/subscription/page.tsx
Content: 
"use client";

import { auth } from "@/firebase/auth";
import ProfileButton from "@/components/topbar/ProfileButton";
import NavigationButton from "@/components/topbar/NavigationButton";
import LogoButton from "@/components/topbar/LogoButton";
import { useEffect, useState } from "react";
import { useAuthState } from "react-firebase-hooks/auth";
import { createCheckoutSession, getCustomerPortal } from "@/firebase/stripe";

export default function Subscription() {
  const [documentLoading, setDocumentLoading] = useState(false);
  const [error, setError] = useState<string | null>(null);
  // in the layout.tsx we are already checking if the user is authenticated
  const [user] = useAuthState(auth);
  const [stripeLoading, setStripeLoading] = useState(false);
  // add loading until we get the claims

  useEffect(() => {
    if (user) {
      console.log("User is authenticated:", user);
      user.getIdTokenResult().then((idTokenResult) => {
        console.log("User claims:", idTokenResult.claims);
      });
    }
  }, [user]);

  const handleDummyCheckout = async () => {
    if (user) {
      setStripeLoading(true);
      //cheap
      //createCheckoutSession(user.uid, "price_1Q0TGCLMFFF2hVk55ewoDsHa");
      //medium
      //createCheckoutSession(user.uid, "price_1Q1ZTpLMFFF2hVk5U3vFjemH");
      //expensive
      createCheckoutSession(user.uid, "price_1Q1ZUSLMFFF2hVk5h3LmOJYG");
    }
  };

  const handleDummyPortal = async () => {
    if (user) {
      setStripeLoading(true);
      getCustomerPortal();
    }
  };

  if (stripeLoading) {
    return (
      <div className="p-3 min-h-screen font-[family-name:var(--font-geist-sans)]">
        <div className="flex justify-between border-b-gray-100 pb-2 border-b-2 h-14">
          <LogoButton title="CREV" href="/home" />
          <div className="flex gap-4">
            <NavigationButton title="Docs" href="/docs" active={false} />
            <NavigationButton
              title="Code Review API Key"
              href="/api-key"
              active={false}
            />
            <ProfileButton />
          </div>
        </div>
        <div className="fixed inset-0 z-50 flex items-center justify-center bg-black bg-opacity-50">
          <div className="flex flex-col items-center justify-center space-y-6 p-6 bg-white rounded-lg shadow-lg">
            {/* Spinner */}
            <div className="animate-spin rounded-full h-16 w-16 border-t-4 border-black"></div>
            <p className="text-lg text-gray-800 font-semibold">
              Loading payment processor, please wait...
            </p>
            <p className="text-sm text-gray-500">
              You will be redirected to a Stripe page shortly.
            </p>
          </div>
        </div>
      </div>
    );
  } else {
    return (
      <div className="p-3 min-h-screen font-[family-name:var(--font-geist-sans)]">
        <div className="flex justify-between border-b-gray-100 pb-2 border-b-2 h-14">
          <LogoButton title="CREV" href="/home" />
          <div className="flex gap-4">
            <NavigationButton title="Docs" href="/docs" active={false} />
            <NavigationButton
              title="Code Review API Key"
              href="/api-key"
              active={false}
            />
            <ProfileButton />
          </div>
        </div>
        <div className="flex items-center justify-center flex-col space-y-4 pb-10 pt-2 ">
          <h1 className="text-2xl font-bold">Manage Subscription Page</h1>
          <button
            onClick={() => user?.uid && handleDummyWrite(user.uid)}
            className="bg-blue-500 text-white px-4 py-2 rounded-md hover:bg-blue-600"
            disabled={documentLoading}
          >
            {documentLoading ? "Writing..." : "Dummy write"}
          </button>

          <button
            onClick={() => handleDummyCheckout()}
            className="bg-blue-500 text-white px-4 py-2 rounded-md hover:bg-blue-600"
            disabled={documentLoading}
          >
            {documentLoading ? "Writing..." : "Buy subscription"}
          </button>

          <button
            onClick={() => handleDummyPortal()}
            className="bg-blue-500 text-white px-4 py-2 rounded-md hover:bg-blue-600"
            disabled={documentLoading}
          >
            {documentLoading ? "Writing..." : "Open Customer Portal"}
          </button>
          {error && <p className="text-red-500">Error: {error}</p>}
        </div>
      </div>
    );
  }
}


File: 
src/app/(protected)/subscription/test_page.tsx
Content: 
"use client";

import { auth } from "@/firebase/auth";
import ProfileButton from "@/components/topbar/ProfileButton";
import NavigationButton from "@/components/topbar/NavigationButton";
import LogoButton from "@/components/topbar/LogoButton";
import { useEffect, useState } from "react";
import { addUserDocument } from "@/firebase/firestore";
import { useAuthState } from "react-firebase-hooks/auth";
import { createCheckoutSession, getCustomerPortal } from "@/firebase/stripe";

export default function Subscription() {
  const [documentLoading, setDocumentLoading] = useState(false);
  const [error, setError] = useState<string | null>(null);
  // in the layout.tsx we are already checking if the user is authenticated
  const [user] = useAuthState(auth);
  const [stripeLoading, setStripeLoading] = useState(false);
  // add loading until we get the claims

  useEffect(() => {
    if (user) {
      console.log("User is authenticated:", user);
      user.getIdTokenResult().then((idTokenResult) => {
        console.log("User claims:", idTokenResult.claims);
      });
    }
  }, [user]);

  const handleDummyWrite = async (uid: string) => {
    setDocumentLoading(true);
    setError(null);
    try {
      const dummy_data = {
        name: "Dummy das",
        createdAt: new Date(),
      };
      await addUserDocument(uid, dummy_data);
    } catch (err) {
      if (err instanceof Error) {
        setError(err.message);
      } else {
        setError("An unknown error occurred");
      }
    } finally {
      setDocumentLoading(false);
    }
  };

  const handleDummyCheckout = async () => {
    if (user) {
      setStripeLoading(true);
      createCheckoutSession(user.uid, "price_1Q0TGCLMFFF2hVk55ewoDsHa");
    }
  };

  const handleDummyPortal = async () => {
    if (user) {
      setStripeLoading(true);
      getCustomerPortal();
    }
  };

  if (stripeLoading) {
    return (
      <div className="p-3 min-h-screen font-[family-name:var(--font-geist-sans)]">
        <div className="flex justify-between border-b-gray-100 pb-2 border-b-2 h-14">
          <LogoButton title="CREV" href="/home" />
          <div className="flex gap-4">
            <NavigationButton title="Docs" href="/docs" active={false} />
            <NavigationButton
              title="Code Review API Key"
              href="/api-key"
              active={false}
            />
            <ProfileButton />
          </div>
        </div>
        <div className="fixed inset-0 z-50 flex items-center justify-center bg-black bg-opacity-50">
          <div className="flex flex-col items-center justify-center space-y-6 p-6 bg-white rounded-lg shadow-lg">
            {/* Spinner */}
            <div className="animate-spin rounded-full h-16 w-16 border-t-4 border-black"></div>
            <p className="text-lg text-gray-800 font-semibold">
              Loading payment processor, please wait...
            </p>
            <p className="text-sm text-gray-500">
              You will be redirected to a Stripe page shortly.
            </p>
          </div>
        </div>
      </div>
    );
  } else {
    return (
      <div className="p-3 min-h-screen font-[family-name:var(--font-geist-sans)]">
        <div className="flex justify-between border-b-gray-100 pb-2 border-b-2 h-14">
          <LogoButton title="CREV" href="/home" />
          <div className="flex gap-4">
            <NavigationButton title="Docs" href="/docs" active={false} />
            <NavigationButton
              title="Code Review API Key"
              href="/api-key"
              active={false}
            />
            <ProfileButton />
          </div>
        </div>
        <div className="flex items-center justify-center flex-col space-y-4 pb-10 pt-2 ">
          <h1 className="text-2xl font-bold">Manage Subscription Page</h1>
          <button
            onClick={() => user?.uid && handleDummyWrite(user.uid)}
            className="bg-blue-500 text-white px-4 py-2 rounded-md hover:bg-blue-600"
            disabled={documentLoading}
          >
            {documentLoading ? "Writing..." : "Dummy write"}
          </button>

          <button
            onClick={() => handleDummyCheckout()}
            className="bg-blue-500 text-white px-4 py-2 rounded-md hover:bg-blue-600"
            disabled={documentLoading}
          >
            {documentLoading ? "Writing..." : "Buy subscription"}
          </button>

          <button
            onClick={() => handleDummyPortal()}
            className="bg-blue-500 text-white px-4 py-2 rounded-md hover:bg-blue-600"
            disabled={documentLoading}
          >
            {documentLoading ? "Writing..." : "Open Customer Portal"}
          </button>
          {error && <p className="text-red-500">Error: {error}</p>}
        </div>
      </div>
    );
  }
}


File: 
src/app/docs/page.tsx
Content: 
"use client";

import { useRouter } from "next/navigation";
import { auth } from "@/firebase/auth";
import ProfileButton from "@/components/topbar/ProfileButton";
import NavigationButton from "@/components/topbar/NavigationButton";
import LogoButton from "@/components/topbar/LogoButton";
import { useAuthState } from "react-firebase-hooks/auth";

export default function Home() {
  const router = useRouter();
  const [user] = useAuthState(auth);

  return (
    <div className="p-3 min-h-screen font-[family-name:var(--font-geist-sans)]">
      {/* Header */}

      {user && (
        <div className="flex justify-between border-b-gray-100 pb-2 border-b-2 h-14">
          <LogoButton title="CREV" href="/home" />
          <div className="flex gap-4">
            <NavigationButton title="Docs" href="/docs" active={true} />
            <NavigationButton
              title="Code Review API Key"
              href="/api-key"
              active={false}
            />
            <ProfileButton />
          </div>
        </div>
      )}
      {!user && (
        <div className="flex justify-between border-b-gray-100 pb-2 border-b-2  h-14">
          <LogoButton title="CREV" href="/" />
          <div className="flex gap-4">
            <NavigationButton title="Docs" href="/docs" active={false} />
            <NavigationButton title="Pricing" href="/pricing" active={false} />
            <button
              onClick={() => router.push("login")}
              className="text-white bg-black hover:bg-gray-800 focus:outline-none rounded-lg py-2 px-4"
            >
              Sign in
            </button>
          </div>
        </div>
      )}

      {/* Documentation Section */}
      <div className="py-10 px-10">
        {/* Installation Section */}
        <section className="border-b-2 border-gray-200 pb-8 mb-8">
          <h1 className="text-3xl font-bold mb-4">How to install</h1>

          {/* Homebrew Installation */}
          <div>
            <h2 className="text-xl font-bold mb-2">
              <a
                href="https://brew.sh/"
                target="_blank"
                rel="noopener noreferrer"
                className="text-blue-600 hover:underline"
              >
                Homebrew (Linux/Mac)
              </a>
            </h2>
            <pre className="bg-gray-100 border border-gray-300 p-2 rounded-lg text-sm">
              $ brew install crev
            </pre>
          </div>

          {/* Scoop Installation */}
          <div className="mt-4">
            <h2 className="text-xl font-bold mb-2">
              <a
                href="https://scoop.sh/"
                target="_blank"
                rel="noopener noreferrer"
                className="text-blue-600 hover:underline"
              >
                Scoop (Windows)
              </a>
            </h2>
            <pre className="bg-gray-100 border border-gray-300 p-2 rounded-lg text-sm overflow-x-auto">
              $ scoop bucket add crev https://github.com/vossenwout/scoop-crev
            </pre>
            <pre className="bg-gray-100 border border-gray-300 p-2 rounded-lg text-sm mt-2 overflow-x-auto">
              $ scoop install crev
            </pre>
          </div>

          {/* Binary Installation */}
          <div className="mt-4">
            <h2 className="text-xl font-bold">
              <a
                href="https://github.com/vossenwout/crev/releases"
                target="_blank"
                rel="noopener noreferrer"
                className="text-blue-600 hover:underline"
              >
                Binaries
              </a>
            </h2>
            <p className="mt-2">
              Download the latest release from GitHub{" "}
              <a
                href="https://github.com/vossenwout/crev/releases"
                target="_blank"
                rel="noopener noreferrer"
                className="text-blue-600 hover:underline"
              >
                here
              </a>{" "}
              and update your PATH variable.
            </p>
          </div>

          {/* Installation Scripts */}
          <div className="mt-6">
            <h3 className="text-lg font-bold">Linux/Mac Installation Script</h3>
            <p>Execute the following in your terminal (requires sudo):</p>
            <pre className="bg-gray-100 border border-gray-300 p-2 rounded-lg text-sm mt-2 overflow-x-auto">
              $ sudo curl -L
              https://raw.githubusercontent.com/vossenwout/crev/feature/add-install-scripts/scripts/install.sh
              | bash
            </pre>
            <h3 className="text-lg font-bold mt-4">
              Windows Installation Script
            </h3>
            <p>Invoke this in a PowerShell with admin rights:</p>
            <pre className="bg-gray-100 border border-gray-300 p-2 rounded-lg text-sm mt-2 overflow-x-auto">
              $ Invoke-Expression (Invoke-WebRequest -Uri
              &#39;https://raw.githubusercontent.com/vossenwout/crev/feature/add-install-scripts/scripts/install.ps1&#39;).Content
            </pre>
          </div>
        </section>

        {/* Commands Section */}
        <section>
          <h1 className="text-3xl font-bold mb-4">Commands</h1>

          {/* Initialize Config */}
          <div className="mb-6">
            <h2 className="text-xl font-bold mb-2">Initialize config</h2>
            <p className="mb-2">
              Creates a <code>.crev-config.yaml</code> file in the current
              directory, allowing you to configure the crev tool.
            </p>
            <pre className="bg-gray-100 border border-gray-300 p-2 rounded-lg text-sm overflow-x-auto">
              $ crev init
            </pre>
          </div>

          {/* Bundle Command */}
          <div className="mb-6">
            <h2 className="text-xl font-bold mb-2">Bundle your codebase</h2>
            <p className="mb-2">
              Bundles the current directory into a single file called{" "}
              <code>crev-project.txt</code>.
            </p>
            <pre className="bg-gray-100 border border-gray-300 p-2 rounded-lg text-sm overflow-x-auto">
              $ crev bundle
            </pre>
            <div className="mt-2">
              <p className="font-bold mb-1">Flags:</p>
              <ul className="list-disc list-inside">
                <li className="mb-2">
                  <span className="font-semibold">--ignore-ext</span> - Exclude
                  specific file extensions.
                  <pre className="bg-gray-100 border border-gray-300 p-2 rounded-lg text-sm mt-2 overflow-x-auto">
                    $ crev bundle --ignore-ext=.txt,.md
                  </pre>
                </li>
                <li className="mb-2">
                  <span className="font-semibold">--ignore-pre</span> - Exclude
                  files or directories by prefix.
                  <pre className="bg-gray-100 border border-gray-300 p-2 rounded-lg text-sm mt-2 overflow-x-auto">
                    $ crev bundle --ignore-pre=tests,readme
                  </pre>
                </li>
                <li className="mb-2">
                  <span className="font-semibold">--include-ext</span> - Only
                  include specified file extensions.
                  <pre className="bg-gray-100 border border-gray-300 p-2 rounded-lg text-sm mt-2 overflow-x-auto">
                    $ crev bundle --include-ext=.js,.ts
                  </pre>
                </li>
              </ul>
            </div>
          </div>

          {/* Review Command */}
          <div className="mb-6">
            <h2 className="text-xl font-bold mb-2">Get an AI code review</h2>
            <p className="mb-2">
              Let an AI review your bundled project file. Requires an CREV API
              key. {}
              <button
                className="text-blue-600 hover:underline"
                onClick={() => router.push("/api-key")}
              >
                Create/Manage API Key
              </button>
              .
            </p>
            <pre className="bg-gray-100 border border-gray-300 p-2 rounded-lg text-sm overflow-x-auto">
              $ crev review
            </pre>
            <div className="mt-2">
              <p className="font-bold mb-1">Flags:</p>
              <ul className="list-disc list-inside">
                <li className="mb-2">
                  <span className="font-semibold">--crev-api-key</span> -
                  Provide your API key for the review command.
                  <pre className="bg-gray-100 border border-gray-300 p-2 rounded-lg text-sm mt-2 overflow-x-auto">
                    $ crev review --crev-api-key=YOUR_CREV_API_KEY
                  </pre>
                </li>
              </ul>
            </div>
          </div>
        </section>

        <div className="flex flex-col  border-t-gray-200 border-t p-3 gap-2 items-center justify-center">
          <a
            href="https://github.com/vossenwout/crev"
            target="_blank"
            rel="noopener noreferrer"
            className="mt-2"
          >
            <img
              src="https://github.githubassets.com/images/modules/logos_page/GitHub-Mark.png"
              alt="GitHub logo"
              className="w-10 h-10"
            />
          </a>
          <p> Contact: vossen.w@hotmail.com</p>
        </div>
      </div>
    </div>
  );
}


File: 
src/app/globals.css
Content: 
@tailwind base;
@tailwind components;
@tailwind utilities;

:root {
  --background: #ffffff;
  --foreground: #171717;
}
/* Dark mode
@media (prefers-color-scheme: dark) {
  :root {
    --background: #0a0a0a;
    --foreground: #ededed;
  }
}
*/

body {
  color: var(--foreground);
  background: var(--background);
  font-family: Arial, Helvetica, sans-serif;
}

@layer utilities {
  .text-balance {
    text-wrap: balance;
  }
}


File: 
src/app/layout.tsx
Content: 
import type { Metadata } from "next";
import localFont from "next/font/local";
import "./globals.css";

const geistSans = localFont({
  src: "./fonts/GeistVF.woff",
  variable: "--font-geist-sans",
  weight: "100 900",
});
const geistMono = localFont({
  src: "./fonts/GeistMonoVF.woff",
  variable: "--font-geist-mono",
  weight: "100 900",
});

export const metadata: Metadata = {
  title: "Create Next App",
  description: "Generated by create next app",
};

export default function RootLayout({
  children,
}: Readonly<{
  children: React.ReactNode;
}>) {
  return (
    <html lang="en">
      <body
        className={`${geistSans.variable} ${geistMono.variable} antialiased`}
      >
        {children}
      </body>
    </html>
  );
}


File: 
src/app/login/email/page.tsx
Content: 
"use client";

import React from "react";
import { useAuthState } from "react-firebase-hooks/auth";
import { auth } from "@/firebase/auth";
import { useRouter } from "next/navigation";
import EmailAuthForm from "@/components/login/EmailAuthForm";

export default function EmailLoginPage() {
  const [user, loading] = useAuthState(auth);
  const router = useRouter();

  if (user) {
    router.push("/home");
  }

  return (
    <div className="p-3 min-h-screen font-[family-name:var(--font-geist-sans)]">
      <div className="flex justify-between border-b-gray-100 pb-2 border-b-2 h-14">
        <div className="flex justify-center items-center gap-10">
          <h1
            className="text-3xl font-extrabold cursor-pointer hover:underline"
            onClick={() => router.push("/")}
          >
            CREV
          </h1>
        </div>
      </div>
      {!loading && !user && (
        <div className="flex flex-col items-center justify-center pt-5">
          <h1 className="text-4xl font-bold mb-4 pb-5">Continue with Email</h1>
          <EmailAuthForm
            onSuccess={() => {
              router.push("/home");
            }}
          />
        </div>
      )}
    </div>
  );
}


File: 
src/app/login/page.tsx
Content: 
"use client";

import { useAuthState } from "react-firebase-hooks/auth";
import { auth, signInWithGoogle } from "@/firebase/auth";
import { useRouter } from "next/navigation";
import LogoButton from "@/components/topbar/LogoButton";
import { useEffect } from "react";

export default function LoginPage() {
  const [user, loading, error] = useAuthState(auth);
  const router = useRouter();

  useEffect(() => {
    if (user) {
      router.push("/home");
    }
  }, [user]);

  return (
    <div className=" p-3 min-h-screen font-[family-name:var(--font-geist-sans)]  ">
      <div className="flex justify-between border-b-gray-100 pb-2 border-b-2 h-14">
        <LogoButton title="CREV" href="/" />
      </div>
      {!loading && !user && (
        <div className="flex flex-col items-center justify-center pt-5">
          <h1 className="text-4xl font-bold mb-4 pb-5">Log In / Sign Up</h1>
          <div className="flex flex-col items-center justify-center gap-4">
            <button
              onClick={signInWithGoogle}
              className="bg-white text-black w-72 justify-center px-2 py-2 rounded-md flex items-center border border-gray-200 hover:bg-gray-100 focus:outline-none"
            >
              <img
                src="https://upload.wikimedia.org/wikipedia/commons/c/c1/Google_%22G%22_logo.svg"
                alt="Google logo"
                className="w-6 h-6 mr-2"
              />
              Continue with Google
            </button>
            <button
              onClick={() => router.push("/login/email")}
              className="bg-white text-black w-72 justify-center px-2 py-2 rounded-md flex items-center border border-gray-200 hover:bg-gray-100 focus:outline-none"
            >
              <img
                src="https://upload.wikimedia.org/wikipedia/commons/3/3d/Envelope_font_awesome.svg"
                alt="Email logo"
                className="w-6 h-6 mr-2"
              />
              Continue with Email
            </button>
            {error && <p>Error: {error.message}</p>}
          </div>
        </div>
      )}

      <div className="flex items-center  justify-center flex-col  space-y-4 pb-10 pt-2  font-[family-name:var(--font-geist-mono)]"></div>
    </div>
  );
}


File: 
src/app/page.tsx
Content: 
"use client";

import { useRouter } from "next/navigation";
import Image from "next/image";
import LogoButton from "@/components/topbar/LogoButton";
import NavigationButton from "@/components/topbar/NavigationButton";

export default function Home() {
  const router = useRouter();

  return (
    <div className=" p-3 min-h-screen font-[family-name:var(--font-geist-sans)]  ">
      <div className="flex justify-between border-b-gray-100 pb-2 mb-4 border-b-2 h-14 ">
        <LogoButton title="CREV" href="/" />
        <div className="flex gap-4">
          <NavigationButton title="Docs" href="/docs" active={false} />
          <NavigationButton title="Pricing" href="/pricing" active={false} />
          <button
            onClick={() => router.push("/login")}
            className="text-white bg-black hover:bg-gray-800 focus:outline-none rounded-lg py-2 px-4"
          >
            Sign in
          </button>
        </div>
      </div>

      {/* Main Content */}
      <main className="flex flex-col items-center justify-center px-6 py-8 space-y-12">
        {/* Hero Section */}
        <section className="text-center max-w-2xl">
          <h1 className="text-4xl font-bold mb-4">
            CLI Tool For AI Code Reviews
          </h1>
          <p className="text-lg text-gray-700">
            Harness the power of AI to improve your code quality and catch bugs
            early.
          </p>
        </section>

        {/* Features Section */}
        <section className="w-full max-w-4xl space-y-16">
          {/* Feature 1: Bundle Your Codebase */}
          <div className="flex flex-col md:flex-row items-center bg-gray-100 p-8 rounded-lg shadow-md">
            {/* Text Content */}
            <div className="md:w-1/2">
              <h2 className="text-2xl font-semibold mb-3">
                Bundle Your Codebase
              </h2>
              <p className="text-gray-600 mb-6">
                Consolidate your entire codebase into a single, manageable file
                effortlessly.
              </p>
              <div className="flex justify-start w-full md:w-auto">
                <pre className="bg-black text-white p-3 rounded-md font-mono text-sm inline-block w-auto max-w-xs mb-6">
                  $ crev bundle
                </pre>
              </div>
            </div>
            {/* Image */}
            <div className="md:w-1/2">
              <Image
                src="/images/project.png"
                alt="Bundle your codebase"
                width={400}
                height={200}
                className="rounded-md shadow-lg"
              />
            </div>
          </div>

          {/* Feature 2: AI-Powered Code Reviews */}
          <div className="flex flex-col items-start bg-gray-100 p-8 rounded-lg shadow-md">
            <h2 className="text-2xl font-semibold mb-3">
              AI-Powered Code Reviews
            </h2>
            <p className="text-gray-600 mb-6">
              Receive comprehensive AI-driven code reviews to improve code
              quality and maintainability.
            </p>
            <pre className="bg-black text-white p-3 rounded-md font-mono text-sm mb-6">
              $ crev review
            </pre>
            <Image
              src="/images/example-code-review.png"
              alt="AI Code Review"
              width={800}
              height={400}
              className="rounded-md shadow-lg w-full object-cover"
            />
          </div>
        </section>

        {/* Call to Action */}
        <section className="text-center">
          <p className="text-lg mb-4">
            Interested in improving your code quality?
          </p>
          <button
            onClick={() => router.push("/login")}
            className="px-6 py-3 bg-black text-white rounded-lg transition-colors duration-200 hover:bg-gray-800"
          >
            Get Started
          </button>
        </section>
      </main>

      {/* Footer */}
      <footer className="bg-gray-50 border-t border-gray-300 py-6">
        <div className="flex flex-col items-center space-y-4">
          <a
            href="https://github.com/vossenwout/crev"
            target="_blank"
            rel="noopener noreferrer"
            className="hover:opacity-80 transition-opacity duration-200"
          >
            <Image
              src="https://github.githubassets.com/images/modules/logos_page/GitHub-Mark.png"
              alt="GitHub"
              width={40}
              height={40}
            />
          </a>
          <p className="text-sm text-gray-600">Contact: vossen.w@hotmail.com</p>
        </div>
      </footer>
    </div>
  );
}


File: 
src/app/pricing/page.tsx
Content: 
"use client";

import SubscriptionCard from "@/components/subscriptions/SubscriptionCard";
import LogoButton from "@/components/topbar/LogoButton";
import NavigationButton from "@/components/topbar/NavigationButton";
import { useRouter } from "next/navigation";

export default function Pricing() {
  const router = useRouter();

  const pricingPlans = [
    {
      title: "Starter",
      price: "$29",
      features: [
        "Basic Feature One",
        "Basic Feature Two",
        "Basic Feature Three",
      ],
      buttonText: "Get Started",
      buttonAction: () => router.push("/signup"),
    },
    {
      title: "Enthusiast",
      price: "$59",
      features: [
        "All Starter Features",
        "Advanced Feature One",
        "Advanced Feature Two",
      ],
      buttonText: "Upgrade",
      buttonAction: () => router.push("/upgrade"),
      popular: true, // Highlight this plan
    },
    {
      title: "Professional",
      price: "$119",
      features: [
        "All Professional Features",
        "Dedicated Support",
        "Custom Integrations",
      ],
      buttonText: "Contact Us",
      buttonAction: () => router.push("/contact"),
    },
  ];

  return (
    <div className=" p-3 min-h-screen font-[family-name:var(--font-geist-sans)]  ">
      <div className="flex justify-between border-b-gray-100 pb-2 mb-4 border-b-2  h-14">
        <LogoButton title="CREV" href="/" />
        <div className="flex gap-4">
          <NavigationButton title="Docs" href="/docs" active={false} />
          <NavigationButton title="Pricing" href="/pricing" active={false} />
          <button
            onClick={() => router.push("login")}
            className="text-white bg-black hover:bg-gray-800 focus:outline-none rounded-lg py-2 px-4"
          >
            Sign in
          </button>
        </div>
      </div>

      {/* Bundling and Review Info */}
      <div className="text-center max-w-3xl mx-auto mb-8">
        <p className="text-lg text-gray-700">
          Bundling your code with the <strong>crev bundle</strong> command is is
          completely free! However, to run the <strong>crev review</strong>{" "}
          command and let an export coding AI review your code you can choose
          one of the following plans.
        </p>
      </div>

      {/* Pricing Cards */}
      <div className="max-w-7xl mx-auto grid gap-8 sm:grid-cols-1 md:grid-cols-3">
        {pricingPlans.map((plan, index) => (
          <SubscriptionCard key={index} {...plan} />
        ))}
      </div>

      {/* Footer */}
      <div className="flex flex-col items-center border-t border-gray-300 p-6 mt-12">
        <a
          href="https://github.com/vossenwout/crev"
          target="_blank"
          rel="noopener noreferrer"
          className="mt-2"
        >
          <img
            src="https://github.githubassets.com/images/modules/logos_page/GitHub-Mark.png"
            alt="GitHub logo"
            className="w-10 h-10"
          />
        </a>
        <span className="mt-4">Contact: vossen.w@hotmail.com</span>
      </div>
    </div>
  );
}


File: 
src/components/login/EmailAuthForm.tsx
Content: 
"use client";

import React, { useState } from "react";
import { auth } from "@/firebase/auth";
import {
  signInWithEmailAndPassword,
  createUserWithEmailAndPassword,
  fetchSignInMethodsForEmail,
} from "firebase/auth";

interface EmailAuthFormProps {
  onSuccess: () => void;
}

export default function EmailAuthForm({ onSuccess }: EmailAuthFormProps) {
  const [email, setEmail] = useState("");
  const [step, setStep] = useState(1); // Step 1: Enter email, Step 2: Enter password
  const [isExistingUser, setIsExistingUser] = useState(false);
  const [password, setPassword] = useState("");
  const [errorMessage, setErrorMessage] = useState("");

  const handleEmailSubmit = async (e: React.FormEvent<HTMLFormElement>) => {
    e.preventDefault();
    setErrorMessage("");

    try {
      // Check if the email is associated with an existing account
      // !! This requires Email Enumeration protection to be disabled in Firebase Auth settings !!
      const signInMethods = await fetchSignInMethodsForEmail(auth, email);

      if (signInMethods.length > 0) {
        setIsExistingUser(true);
      } else {
        setIsExistingUser(false);
      }

      setStep(2); // Proceed to the password entry step
    } catch (error) {
      if (error instanceof Error) {
        setErrorMessage(error.message);
      } else {
        setErrorMessage("An unknown error occurred.");
      }
    }
  };

  const handlePasswordSubmit = async (e: { preventDefault: () => void }) => {
    e.preventDefault();
    setErrorMessage("");

    try {
      if (isExistingUser) {
        // Sign in the existing user
        await signInWithEmailAndPassword(auth, email, password);
      } else {
        // Create a new user account
        await createUserWithEmailAndPassword(auth, email, password);
      }
      if (onSuccess) {
        onSuccess();
      }
    } catch (error) {
      if (error instanceof Error && "code" in error) {
        if (error.code === "auth/wrong-password") {
          setErrorMessage("Incorrect password. Please try again.");
        } else if (error.code === "auth/weak-password") {
          setErrorMessage("Password should be at least 6 characters.");
        } else {
          setErrorMessage(error.message);
        }
      } else {
        setErrorMessage("An unknown error occurred.");
      }
    }
  };

  return (
    <div className="flex flex-col items-center justify-center gap-4">
      {step === 1 && (
        <form
          onSubmit={handleEmailSubmit}
          className="w-full flex flex-col items-center gap-4"
        >
          <input
            type="email"
            placeholder="Enter your email"
            value={email}
            onChange={(e) => setEmail(e.target.value)}
            required
            className="w-72 px-2 py-2 border border-gray-200 rounded-md"
          />
          <button
            type="submit"
            className="bg-black text-white w-72 px-2 py-2 rounded-md hover:bg-gray-800 focus:outline-none"
          >
            Continue
          </button>
        </form>
      )}

      {step === 2 && (
        <form
          onSubmit={handlePasswordSubmit}
          className="w-full flex flex-col items-center gap-4"
        >
          <p className="text-center">
            {isExistingUser
              ? "Welcome back! Please enter your password."
              : "Create a new account. Please set a password."}
          </p>
          <input
            type="password"
            placeholder="Enter your password"
            value={password}
            onChange={(e) => setPassword(e.target.value)}
            required
            className="w-72 px-2 py-2 border border-gray-200 rounded-md"
          />
          <button
            type="submit"
            className="bg-black text-white w-72 px-2 py-2 rounded-md hover:bg-gray-800 focus:outline-none"
          >
            {isExistingUser ? "Sign In" : "Sign Up"}
          </button>
        </form>
      )}

      {errorMessage && <p className="text-red-500">Error: {errorMessage}</p>}
    </div>
  );
}


File: 
src/components/subscriptions/SubscriptionCard.tsx
Content: 
type SubscriptionCardProps = {
  title: string;
  price: string;
  features: string[];
  buttonText: string;
  currentPlan?: boolean;
  popular?: boolean;
  buttonAction: () => void;
};

export default function SubscriptionCard(props: SubscriptionCardProps) {
  return (
    <div
      className={`flex flex-col rounded-lg border border-gray-300 shadow-sm overflow-hidden ${
        props.currentPlan || props.popular ? "border-black" : ""
      }`}
    >
      {props.currentPlan && (
        <div className="px-6 py-3 bg-black text-white text-sm font-semibold uppercase text-center">
          Current plan
        </div>
      )}
      {props.popular && (
        <div className="px-6 py-3 bg-black text-white text-sm font-semibold uppercase text-center">
          Most popular
        </div>
      )}
      <div className="px-6 py-8 flex-grow">
        <h2 className="text-2xl font-semibold mb-4">{props.title}</h2>
        <p className="text-4xl font-bold mb-6">
          {props.price}
          <span className="text-lg font-medium text-gray-600">/mo</span>
        </p>
        <ul className="space-y-4">
          {props.features.map((feature, idx) => (
            <li key={idx} className="flex items-start">
              <svg
                className="w-6 h-6 text-black flex-shrink-0 mt-1"
                fill="currentColor"
                viewBox="0 0 20 20"
              >
                <path
                  fillRule="evenodd"
                  d="M16.707 5.293a1 1 0 00-1.414 0L9 11.586 5.707 8.293a1 1 0 00-1.414 1.414l4 4a1 1 0 001.414 0l7-7a1 1 0 000-1.414z"
                  clipRule="evenodd"
                />
              </svg>
              <span className="ml-3 text-base text-gray-700">{feature}</span>
            </li>
          ))}
        </ul>
      </div>
      <div className="px-6 py-6 bg-gray-50">
        <button
          onClick={props.buttonAction}
          className="w-full bg-black text-white font-semibold py-2 px-4 rounded-lg hover:bg-gray-800 focus:outline-none transition duration-300"
        >
          {props.buttonText}
        </button>
      </div>
    </div>
  );
}


File: 
src/components/topbar/LogoButton.tsx
Content: 
import { useRouter } from "next/navigation";

interface LogoButtonProps {
  title: string;
  href: string;
}

export default function LogoButton(props: LogoButtonProps) {
  const router = useRouter();

  return (
    <button
      onClick={() => router.push(props.href)}
      className="text-3xl  font-extrabold  cursor-pointer hover:underline"
    >
      {props.title}
    </button>
  );
}


File: 
src/components/topbar/NavigationButton.tsx
Content: 
import { useRouter } from "next/navigation";

interface NavigationButtonProps {
  title: string;
  href: string;
  active: boolean;
}

export default function NavigationButton(props: NavigationButtonProps) {
  const router = useRouter();

  return (
    <button
      onClick={() => router.push(props.href)}
      className={`${
        props.active
          ? "bg-black text-white"
          : "bg-white text-black hover:bg-gray-200"
      } focus:outline-none rounded-md py-2 px-4 border border-gray-200 transition duration-300 ease-in-out`}
    >
      {props.title}
    </button>
  );
}


File: 
src/components/topbar/ProfileButton.tsx
Content: 
"use client";

import { useState, useRef, useEffect } from "react";
import { useRouter } from "next/navigation";
import { signOut } from "firebase/auth";
import { auth } from "@/firebase/auth";
import { FaUserCircle } from "react-icons/fa";

export default function ProfileButton() {
  const router = useRouter();
  const [dropdownOpen, setDropdownOpen] = useState(false);
  const dropdownRef = useRef<HTMLDivElement>(null);

  const handleSignOut = async () => {
    try {
      await signOut(auth);
      router.push("/");
    } catch (error) {
      console.error("Sign out failed:", error);
    }
  };

  const handleSubscription = () => {
    router.push("/subscription");
  };

  const toggleDropdown = () => {
    setDropdownOpen(!dropdownOpen);
  };

  // Close dropdown when clicking outside
  useEffect(() => {
    const handleClickOutside = (event: MouseEvent) => {
      if (
        dropdownRef.current &&
        !dropdownRef.current.contains(event.target as Node)
      ) {
        setDropdownOpen(false);
      }
    };

    if (dropdownOpen) {
      document.addEventListener("mousedown", handleClickOutside);
    } else {
      document.removeEventListener("mousedown", handleClickOutside);
    }

    // Cleanup event listener on unmount
    return () => {
      document.removeEventListener("mousedown", handleClickOutside);
    };
  }, [dropdownOpen]);

  return (
    <div ref={dropdownRef} className="relative inline-block text-left h-max">
      <button
        onClick={toggleDropdown}
        className="flex items-center text-black hover:bg-gray-200 focus:outline-none rounded-md py-2 px-4  border-gray-200 transition duration-300 ease-in-out"
      >
        <FaUserCircle size={28} />
      </button>

      {dropdownOpen && (
        <div className="absolute right-0 mt-2 w-48 bg-white border border-gray-200 rounded-md shadow-lg">
          <button
            onClick={handleSubscription}
            className="block w-full text-left px-4 py-2 text-gray-700 hover:bg-gray-100"
          >
            Subscription
          </button>
          <button
            onClick={handleSignOut}
            className="block w-full text-left px-4 py-2 text-white bg-gray-500 hover:bg-gray-400 border border-gray-100"
          >
            Log Out
          </button>
        </div>
      )}
    </div>
  );
}


File: 
src/data/subscriptions.ts
Content: 
export type UsageLimits = {
  maxDailyReviews: number;
};

export type SubscriptionPlan = {
  id: SubscriptionID;
  name: string;
  price: number;
  usageLimits: UsageLimits;
};

export const SubscriptionIDs = ["test", "pro", "enterprise"] as const;

export type SubscriptionID = (typeof SubscriptionIDs)[number];


File: 
src/firebase/auth.ts
Content: 
import { getAuth, signInWithPopup, GoogleAuthProvider } from "firebase/auth";
import app from "./config";

export const auth = getAuth(app);

// set up Google authentication
const googleProvider = new GoogleAuthProvider();

export const signInWithGoogle = async () => {
  try {
    await signInWithPopup(auth, googleProvider);
  } catch (error) {
    console.error("Google sign-in failed:", error);
  }
};


File: 
src/firebase/config.ts
Content: 
// Import the functions you need from the SDKs you need
import { initializeApp } from "firebase/app";
import { getFirestore } from "firebase/firestore"; // Import Firestore
import { getFunctions, connectFunctionsEmulator } from "firebase/functions";

const firebaseConfig = {
  apiKey: process.env.NEXT_PUBLIC_FIREBASE_API_KEY,
  authDomain: process.env.NEXT_PUBLIC_FIREBASE_AUTH_DOMAIN,
  projectId: process.env.NEXT_PUBLIC_FIREBASE_PROJECT_ID,
  storageBucket: process.env.NEXT_PUBLIC_FIREBASE_STORAGE_BUCKET,
  messagingSenderId: process.env.NEXT_PUBLIC_FIREBASE_MESSAGING_SENDER_ID,
  appId: process.env.NEXT_PUBLIC_FIREBASE_APP_ID,
  measurementId: process.env.NEXT_PUBLIC_FIREBASE_MEASUREMENT_ID,
};

// Initialize Firebase
const app = initializeApp(firebaseConfig);

// Initialize Firestore
export const db = getFirestore(app);

// Initialize Functions
export const functions = getFunctions(app);
if (process.env.NEXT_PUBLIC_ENV === "local") {
  connectFunctionsEmulator(functions, "127.0.0.1", 5001);
}

export default app;


File: 
src/firebase/firestore.ts
Content: 
// src/firebase/firestore.ts
import { db } from "./config";
import { collection, doc, getDoc } from "firebase/firestore";

// Function to add a dummy document to Firestore
export const fetchApiKey = async (uid: string) => {
  try {
    const userCollection = collection(db, "users");
    const userDoc = doc(userCollection, uid);
    const userDocSnap = await getDoc(userDoc);
    if (userDocSnap.exists()) {
      const apiKey = userDocSnap.data().apiKey;
      if (apiKey) {
        return apiKey;
      }
      return null;
    }
    return null;
  } catch (error) {
    console.error("Error fetching API key:", error);
    return null;
  }
};


File: 
src/firebase/functions/generateAPIKey.ts
Content: 
import { httpsCallable } from "firebase/functions";
import { functions } from "../config";

interface ApiKeyResponse {
  apiKey: string;
  message: string;
}

interface ApiError {
  code: string;
  message: string;
}

export const generateApiKey = async (): Promise<ApiKeyResponse> => {
  const functionRef = httpsCallable<any, ApiKeyResponse>(
    functions,
    "generateApiKey"
  );

  try {
    const { data } = await functionRef();
    return data as ApiKeyResponse;
  } catch (error: any) {
    if (error.code && error.message) {
      const apiError: ApiError = {
        code: error.code,
        message: error.message,
      };
      console.error(
        `Error Code: ${apiError.code}, Message: ${apiError.message}`
      );
      throw apiError;
    } else {
      throw new Error("An unexpected error occurred.");
    }
  }
};


File: 
src/firebase/stripe.ts
Content: 
import { SubscriptionID } from "@/data/subscriptions";
import { db, functions } from "./config";
import {
  collection,
  addDoc,
  doc,
  onSnapshot,
  getDocs,
  query,
  where,
  getDoc,
} from "firebase/firestore";
import { httpsCallable } from "firebase/functions";

export const createCheckoutSession = async (uid: string, priceId: string) => {
  const checkoutSessionRef = await addDoc(
    collection(db, "customers", uid, "checkout_sessions"),
    {
      price: priceId,
      success_url: process.env.NEXT_PUBLIC_CHECKOUT_SUCCESS_URL,
      cancel_url: process.env.NEXT_PUBLIC_CHECKOUT_CANCEL_URL,
    }
  );
  // Wait for the CheckoutSession to get attached by the extension
  onSnapshot(
    doc(db, "customers", uid, "checkout_sessions", checkoutSessionRef.id),
    async (snap) => {
      const data = snap.data();
      if (data) {
        const { error, url } = data;
        if (url) {
          window.location.assign(url);
        } else if (error) {
          // No session, let's display the error message
          alert(`An error occured: ${error.message}`);
        }
      }
    }
  );
};

export const getCustomerPortal = async () => {
  const functionRef = httpsCallable(
    functions,
    "ext-firestore-stripe-payments-createPortalLink"
  );
  const { data } = await functionRef({
    returnUrl: process.env.NEXT_PUBLIC_PORTAL_RETURN_URL,
    locale: "auto",
  });
  const portalData = data as { url: string };
  window.location.assign(portalData.url);
};

export const getSubscriptionInfo = async (uid: string) => {
  try {
    // Reference to the subscriptions collection for the given user
    const collectionRef = collection(db, "customers", uid, "subscriptions");

    // Query for subscriptions with "trialing" or "active" status
    const querySnapshot = await getDocs(
      query(collectionRef, where("status", "in", ["trialing", "active"]))
    );

    // Extract the subscriptions
    const subscriptions = querySnapshot.docs.map((doc) => doc.data());

    if (subscriptions.length === 0) {
      // No active subscriptions found
      return null;
    }

    // Fetch the price for each subscription
    const subscriptionWithPrices = await Promise.all(
      subscriptions.map(async (subscription) => {
        // Handle cases where 'subscription.price' is undefined or invalid
        if (!subscription.price) {
          return { ...subscription, priceAmount: 0 };
        }

        const priceDoc = await getDoc(subscription.price);
        if (priceDoc.exists()) {
          const priceData = priceDoc.data() as { unit_amount: number };
          return { ...subscription, priceAmount: priceData.unit_amount }; // Assuming 'unit_amount' stores the price in cents
        } else {
          return { ...subscription, priceAmount: 0 }; // Default to 0 if price not found
        }
      })
    );

    // Sort the subscriptions by priceAmount in descending order (most expensive first)
    const sortedSubscriptions = subscriptionWithPrices.sort(
      (a, b) => b.priceAmount - a.priceAmount
    );

    console.log("Sorted subscriptions:", sortedSubscriptions);
    const mostExpensiveSubscription = sortedSubscriptions[0] as {
      priceAmount: number;
      role: SubscriptionID;
    };
    // Return the most expensive subscription
    return mostExpensiveSubscription;
  } catch (error) {
    // Log errors appropriately
    console.error("Error getting subscription info:", error);
    return null;
  }
};


